name: Check builds
on:
  - push
  - pull_request

jobs:
  run-tests:
    name: Run tests
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - aarch64
        os:
          - linux
          - darwin
        channel:
          - nixpkgs-unstable
          - nixos-unstable
          - nixos-stable
          - nixpkgs-stable-darwin

        # Define architecture values according to the runner in use.
        include:
          - arch: x86_64
            os: linux
            runner: ubuntu-latest
            cache-system: X64-Linux
          - arch: aarch64
            os: linux
            runner: ubuntu-24.04-arm
            cache-system: ARM64-Linux
          - arch: x86_64
            os: darwin
            runner: macos-13
            cache-system: X64-macOS
          - arch: aarch64
            os: darwin
            runner: macos-latest
            cache-system: ARM64-macOS

        # Remore channel and system combinations that aren't useful.
        exclude:
          - os: linux
            channel: nixpkgs-stable-darwin
          - os: darwin
            channel: nixos-unstable
          - os: darwin
            channel: nixos-stable

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v18
      - name: Set up Nix caching
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Check system
        env:
          TARGET_SYSTEM: ${{ matrix.arch }}-${{ matrix.os }}
        run: |
          current_system="$(nix eval --impure --raw --expr builtins.currentSystem)"
          if [[ "$current_system" != "$TARGET_SYSTEM" ]]; then
              printf '::error title=System mismatch::Running on %s, expected %s\n' "$current_system" "$TARGET_SYSTEM"
              exit 1
          fi
      - name: Run checks
        timeout-minutes: 345
        env:
          CHANNEL: ${{ matrix.channel }}
          TARGET_SYSTEM: ${{ matrix.arch }}-${{ matrix.os }}
        run: |
          tmpdir="$(mktemp -d)"
          nix eval --json --apply builtins.attrNames .#checks."$TARGET_SYSTEM" >"$tmpdir"/checkattrs
          # Escaping here based on lib.strings.escapeNixIdentifier
          jq --raw-output '.[]
              | select(endswith("-\($ENV.CHANNEL)"))
              | ["checks", $ENV.TARGET_SYSTEM, .]
              | map(
                  if test("^[a-zA-Z_][a-zA-Z0-9_'\''-]*$")
                  then .
                  else @json | gsub("\\$"; "\\$")
                  end
                  )
              | join(".")
              | ".#" + .
          ' >"$tmpdir"/checktargets <"$tmpdir"/checkattrs
          nix build --stdin --keep-going <"$tmpdir"/checktargets

  check-fmt:
    name: Check formatting and evaluation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v18
      - name: Set up Nix caching
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Check formatting
        run: nix fmt -- --ci
      - name: Check evaluation
        run: nix flake check --no-build --all-systems --keep-going
